function getMythicID(e: entity) :: text:
    return tag "BukkitValues;mythicmobs:type" of nbt compound of {_e}


damage:
    attacker is a player
    set {_id} to getMythicID(victim)
    if {_id} is set:
        set {_Cause} to "%damage cause%"
        set {_v} to victim
        set {_a} to attacker
        set {_u} to {_a}'s uuid
        set {_damage} to 1
        set {_1} to line 1 of lore of {_a}'s tool
        set {_crit} to isCrit({_a})

        set {_percent} to 1

        if {_Cause} is "attack" or "projectile":
            set {_base} to "physic_attack"
            set {_color} to "c"
        else if {_Cause} is "sweep attack":
            set {_base} to "physic_attack"
            set {_color} to "7"
            set {_percent} to 0.1
        else if {_Cause} is "skmagic":
            set {_base} to "magic_attack"
            set {_color} to "5"
        else:
            set {_base} to "physic_attack"
            set {_color} to "f"
        {_1} is line 1 of lore of {PW::%{_u}%::weapon}:
            set {_damage} to {Pstat::%{_u}%::%{_base}%} + sum({PJobStat::%{_u}%::%{_base}%::*})
        set {_holo} to ({_v}'s location ~ v(0, 1, 0)) ~ randomVector()
        if {_crit} is 1:
            Sound2({_a}, "block.wood_button.click_on", 2)
            set {_d} to {_damage} * {Pstat::%{_u}%::crit_damage} * {_percent}
            set {_color} to colored "&%{_color}%&l"
        else:
            set {_d} to {_damage} * {_percent}
            set {_color} to colored "&%{_color}%"
        set damage to {_d} / 5
        showTempHolo({_holo}, ("%{_color}% %{_d}% &0"), 3 seconds)
        wait a tick
        {_v} is dead:
            mobDrops({_a}, {_id})
            set {_xp} to {mmXP::%{_id}%}
            giveXP({_a}, {_v}'s location, {_xp})
        set {_a::*} to split displayname of {_v} at " &c♥"
        set displayname of {_v} to "%{_a::1}% &c♥%{_v}'s health*5%"
    else if attacker's gamemode is not creative:
        cancel event

function showTempHolo(l: location, texts: texts, time: timespan):
    create a new hologram with line {_texts::*} at {_l} and store in {_holo}
    wait {_time}
    delete holo {_holo}

function updatePlayerHealth(p: player):
    set {_p}'s max health to 10
    set {_u} to {_p}'s uuid
    {P::%{_u}%::Hp} is not set:
        set {P::%{_u}%::Hp} to {Pstat::%{_u}%::hp} ? 10
    {P::%{_u}%::Hp} > 0:
        set {_p}'s health to ({P::%{_u}%::Hp} / ({Pstat::%{_u}%::hp} ? 10)) * 10
    if {P::%{_u}%::Dung} is set:
        set {_dID} to {P::%{_u}%::Dung}
        send action bar "💛 %{P::%{_u}%::Hp}% / %{Pstat::%{_u}%::hp}% &7( 残り %{Dung::%{_did}%::Time}% &7秒 )" to {_p}
    else:
        send action bar "💛 %{P::%{_u}%::Hp}% / %{Pstat::%{_u}%::hp}%" to {_p}
    set level of {_p} to {P::%{_u}%::Mana} ? 0
    {_p} is not flying:
        set {_speed} to 0.2
        if {P::%{_u}%::Job} is "none":
            {PJob::%{_u}%::None} >= 2
            {P::%{_u}%::Hp}/{Pstat::%{_u}%::hp} >= 0.9
            set {_speed} to {_speed} * 1.3
        set {_p}'s walk speed to {_speed}
function getDefenceP(p: player) :: number:
    set {_u} to {_p}'s uuid
    return max(1 - ((1.009^(-1*{Pstat::%{_u}%::def}))*-1 + 1), 0.3)
damage:
    event is not cancelled
    victim is a player
    damage cause is not void
    set {_u} to victim's uuid
    set {_def} to getDefenceP(victim)
    set {_d} to damage * {_def}
    set damage to 0
    if {P::%{_u}%::Hp} - {_d} <= 0:
        set {P::%{_u}%::Hp} to 0
        set damage to 99999
    else:
        remove {_d} from {P::%{_u}%::Hp}
    updatePlayerHealth(victim)
respawn:
    set {_u} to player's uuid
    set {P::%{_u}%::Hp} to {Pstat::%{_u}%::hp}
function isCrit(p: player) :: number:
    set {_u} to {_p}'s uuid
    set {_cp} to {Pstat::%{_u}%::crit_rate}
    chance of {_cp}:
        return 1
    return 0
command /skheal:
    permission: op
    trigger:
        set {P::%player's uuid%::hp} to {Pstat::%player's uuid%::hp}
        send "&d回復しました"